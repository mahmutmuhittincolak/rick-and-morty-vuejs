{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { decode } from \"@webassemblyjs/wasm-parser\";\nimport { traverse } from \"@webassemblyjs/ast\";\nimport { cloneNode } from \"@webassemblyjs/ast/lib/clone\";\nimport { shrinkPaddedLEB128 } from \"@webassemblyjs/wasm-opt\";\nimport { getSectionForNode } from \"@webassemblyjs/helper-wasm-bytecode\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport { applyOperations } from \"./apply\";\nfunction hashNode(node) {\n  return JSON.stringify(node);\n}\nfunction preprocess(ab) {\n  var optBin = shrinkPaddedLEB128(new Uint8Array(ab));\n  return optBin.buffer;\n}\nfunction sortBySectionOrder(nodes) {\n  var originalOrder = new Map();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n  try {\n    for (var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _node = _step.value;\n      originalOrder.set(_node, originalOrder.size);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n  nodes.sort(function (a, b) {\n    var sectionA = getSectionForNode(a);\n    var sectionB = getSectionForNode(b);\n    var aId = constants.sections[sectionA];\n    var bId = constants.sections[sectionB];\n    if (typeof aId !== \"number\" || typeof bId !== \"number\") {\n      throw new Error(\"Section id not found\");\n    }\n    if (aId === bId) {\n      // $FlowIgnore originalOrder is filled for all nodes\n      return originalOrder.get(a) - originalOrder.get(b);\n    }\n    return aId - bId;\n  });\n}\nexport function edit(ab, visitors) {\n  ab = preprocess(ab);\n  var ast = decode(ab);\n  return editWithAST(ast, ab, visitors);\n}\nexport function editWithAST(ast, ab, visitors) {\n  var operations = [];\n  var uint8Buffer = new Uint8Array(ab);\n  var nodeBefore;\n  function before(type, path) {\n    nodeBefore = cloneNode(path.node);\n  }\n  function after(type, path) {\n    if (path.node._deleted === true) {\n      operations.push({\n        kind: \"delete\",\n        node: path.node\n      }); // $FlowIgnore\n    } else if (hashNode(nodeBefore) !== hashNode(path.node)) {\n      operations.push({\n        kind: \"update\",\n        oldNode: nodeBefore,\n        node: path.node\n      });\n    }\n  }\n  traverse(ast, visitors, before, after);\n  uint8Buffer = applyOperations(ast, uint8Buffer, operations);\n  return uint8Buffer.buffer;\n}\nexport function add(ab, newNodes) {\n  ab = preprocess(ab);\n  var ast = decode(ab);\n  return addWithAST(ast, ab, newNodes);\n}\nexport function addWithAST(ast, ab, newNodes) {\n  // Sort nodes by insertion order\n  sortBySectionOrder(newNodes);\n  var uint8Buffer = new Uint8Array(ab); // Map node into operations\n\n  var operations = newNodes.map(function (n) {\n    return {\n      kind: \"add\",\n      node: n\n    };\n  });\n  uint8Buffer = applyOperations(ast, uint8Buffer, operations);\n  return uint8Buffer.buffer;\n}","map":{"version":3,"names":["decode","traverse","cloneNode","shrinkPaddedLEB128","getSectionForNode","constants","applyOperations","hashNode","node","JSON","stringify","preprocess","ab","optBin","Uint8Array","buffer","sortBySectionOrder","nodes","originalOrder","Map","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","_node","value","set","size","err","return","sort","a","b","sectionA","sectionB","aId","sections","bId","Error","get","edit","visitors","ast","editWithAST","operations","uint8Buffer","nodeBefore","before","type","path","after","_deleted","push","kind","oldNode","add","newNodes","addWithAST","map","n"],"sources":["C:/Users/mahmutcolak/Desktop/rick-and-morty/node_modules/@webassemblyjs/wasm-edit/esm/index.js"],"sourcesContent":["import { decode } from \"@webassemblyjs/wasm-parser\";\nimport { traverse } from \"@webassemblyjs/ast\";\nimport { cloneNode } from \"@webassemblyjs/ast/lib/clone\";\nimport { shrinkPaddedLEB128 } from \"@webassemblyjs/wasm-opt\";\nimport { getSectionForNode } from \"@webassemblyjs/helper-wasm-bytecode\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport { applyOperations } from \"./apply\";\n\nfunction hashNode(node) {\n  return JSON.stringify(node);\n}\n\nfunction preprocess(ab) {\n  var optBin = shrinkPaddedLEB128(new Uint8Array(ab));\n  return optBin.buffer;\n}\n\nfunction sortBySectionOrder(nodes) {\n  var originalOrder = new Map();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _node = _step.value;\n      originalOrder.set(_node, originalOrder.size);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  nodes.sort(function (a, b) {\n    var sectionA = getSectionForNode(a);\n    var sectionB = getSectionForNode(b);\n    var aId = constants.sections[sectionA];\n    var bId = constants.sections[sectionB];\n\n    if (typeof aId !== \"number\" || typeof bId !== \"number\") {\n      throw new Error(\"Section id not found\");\n    }\n\n    if (aId === bId) {\n      // $FlowIgnore originalOrder is filled for all nodes\n      return originalOrder.get(a) - originalOrder.get(b);\n    }\n\n    return aId - bId;\n  });\n}\n\nexport function edit(ab, visitors) {\n  ab = preprocess(ab);\n  var ast = decode(ab);\n  return editWithAST(ast, ab, visitors);\n}\nexport function editWithAST(ast, ab, visitors) {\n  var operations = [];\n  var uint8Buffer = new Uint8Array(ab);\n  var nodeBefore;\n\n  function before(type, path) {\n    nodeBefore = cloneNode(path.node);\n  }\n\n  function after(type, path) {\n    if (path.node._deleted === true) {\n      operations.push({\n        kind: \"delete\",\n        node: path.node\n      }); // $FlowIgnore\n    } else if (hashNode(nodeBefore) !== hashNode(path.node)) {\n      operations.push({\n        kind: \"update\",\n        oldNode: nodeBefore,\n        node: path.node\n      });\n    }\n  }\n\n  traverse(ast, visitors, before, after);\n  uint8Buffer = applyOperations(ast, uint8Buffer, operations);\n  return uint8Buffer.buffer;\n}\nexport function add(ab, newNodes) {\n  ab = preprocess(ab);\n  var ast = decode(ab);\n  return addWithAST(ast, ab, newNodes);\n}\nexport function addWithAST(ast, ab, newNodes) {\n  // Sort nodes by insertion order\n  sortBySectionOrder(newNodes);\n  var uint8Buffer = new Uint8Array(ab); // Map node into operations\n\n  var operations = newNodes.map(function (n) {\n    return {\n      kind: \"add\",\n      node: n\n    };\n  });\n  uint8Buffer = applyOperations(ast, uint8Buffer, operations);\n  return uint8Buffer.buffer;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}