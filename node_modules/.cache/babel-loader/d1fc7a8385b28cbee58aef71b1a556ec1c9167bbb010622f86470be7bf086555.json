{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nfunction concatUint8Arrays() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n  var totalLength = arrays.reduce(function (a, b) {\n    return a + b.length;\n  }, 0);\n  var result = new Uint8Array(totalLength);\n  var offset = 0;\n  for (var _i = 0; _i < arrays.length; _i++) {\n    var arr = arrays[_i];\n    if (arr instanceof Uint8Array === false) {\n      throw new Error(\"arr must be of type Uint8Array\");\n    }\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  return result;\n}\nexport function overrideBytesInBuffer(buffer, startLoc, endLoc, newBytes) {\n  var beforeBytes = buffer.slice(0, startLoc);\n  var afterBytes = buffer.slice(endLoc, buffer.length); // replacement is empty, we can omit it\n\n  if (newBytes.length === 0) {\n    return concatUint8Arrays(beforeBytes, afterBytes);\n  }\n  var replacement = Uint8Array.from(newBytes);\n  return concatUint8Arrays(beforeBytes, replacement, afterBytes);\n}\nexport function makeBuffer() {\n  for (var _len2 = arguments.length, splitedBytes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    splitedBytes[_key2] = arguments[_key2];\n  }\n  var bytes = [].concat.apply([], splitedBytes);\n  return new Uint8Array(bytes).buffer;\n}\nexport function fromHexdump(str) {\n  var lines = str.split(\"\\n\"); // remove any leading left whitespace\n\n  lines = lines.map(function (line) {\n    return line.trim();\n  });\n  var bytes = lines.reduce(function (acc, line) {\n    var cols = line.split(\" \"); // remove the offset, left column\n\n    cols.shift();\n    cols = cols.filter(function (x) {\n      return x !== \"\";\n    });\n    var bytes = cols.map(function (x) {\n      return parseInt(x, 16);\n    });\n    acc.push.apply(acc, _toConsumableArray(bytes));\n    return acc;\n  }, []);\n  return Buffer.from(bytes);\n}","map":{"version":3,"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","concatUint8Arrays","_len","arguments","arrays","_key","totalLength","reduce","a","b","result","Uint8Array","offset","_i","Error","set","overrideBytesInBuffer","buffer","startLoc","endLoc","newBytes","beforeBytes","slice","afterBytes","replacement","makeBuffer","_len2","splitedBytes","_key2","bytes","concat","apply","fromHexdump","str","lines","split","map","line","trim","acc","cols","shift","filter","x","parseInt","push","Buffer"],"sources":["C:/Users/mahmutcolak/Desktop/rick-and-morty/node_modules/@webassemblyjs/helper-buffer/esm/index.js"],"sourcesContent":["function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction concatUint8Arrays() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  var totalLength = arrays.reduce(function (a, b) {\n    return a + b.length;\n  }, 0);\n  var result = new Uint8Array(totalLength);\n  var offset = 0;\n\n  for (var _i = 0; _i < arrays.length; _i++) {\n    var arr = arrays[_i];\n\n    if (arr instanceof Uint8Array === false) {\n      throw new Error(\"arr must be of type Uint8Array\");\n    }\n\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n\n  return result;\n}\n\nexport function overrideBytesInBuffer(buffer, startLoc, endLoc, newBytes) {\n  var beforeBytes = buffer.slice(0, startLoc);\n  var afterBytes = buffer.slice(endLoc, buffer.length); // replacement is empty, we can omit it\n\n  if (newBytes.length === 0) {\n    return concatUint8Arrays(beforeBytes, afterBytes);\n  }\n\n  var replacement = Uint8Array.from(newBytes);\n  return concatUint8Arrays(beforeBytes, replacement, afterBytes);\n}\nexport function makeBuffer() {\n  for (var _len2 = arguments.length, splitedBytes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    splitedBytes[_key2] = arguments[_key2];\n  }\n\n  var bytes = [].concat.apply([], splitedBytes);\n  return new Uint8Array(bytes).buffer;\n}\nexport function fromHexdump(str) {\n  var lines = str.split(\"\\n\"); // remove any leading left whitespace\n\n  lines = lines.map(function (line) {\n    return line.trim();\n  });\n  var bytes = lines.reduce(function (acc, line) {\n    var cols = line.split(\" \"); // remove the offset, left column\n\n    cols.shift();\n    cols = cols.filter(function (x) {\n      return x !== \"\";\n    });\n    var bytes = cols.map(function (x) {\n      return parseInt(x, 16);\n    });\n    acc.push.apply(acc, _toConsumableArray(bytes));\n    return acc;\n  }, []);\n  return Buffer.from(bytes);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}