{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\nclass SyncHookCodeFactory extends HookCodeFactory {\n  content({\n    onError,\n    onDone,\n    rethrowIfPossible\n  }) {\n    return this.callTapsSeries({\n      onError: (i, err) => onError(err),\n      onDone,\n      rethrowIfPossible\n    });\n  }\n}\nconst factory = new SyncHookCodeFactory();\nconst TAP_ASYNC = () => {\n  throw new Error(\"tapAsync is not supported on a SyncHook\");\n};\nconst TAP_PROMISE = () => {\n  throw new Error(\"tapPromise is not supported on a SyncHook\");\n};\nconst COMPILE = function (options) {\n  factory.setup(this, options);\n  return factory.create(options);\n};\nfunction SyncHook(args = [], name = undefined) {\n  const hook = new Hook(args, name);\n  hook.constructor = SyncHook;\n  hook.tapAsync = TAP_ASYNC;\n  hook.tapPromise = TAP_PROMISE;\n  hook.compile = COMPILE;\n  return hook;\n}\nSyncHook.prototype = null;\nmodule.exports = SyncHook;","map":{"version":3,"names":["Hook","require","HookCodeFactory","SyncHookCodeFactory","content","onError","onDone","rethrowIfPossible","callTapsSeries","i","err","factory","TAP_ASYNC","Error","TAP_PROMISE","COMPILE","options","setup","create","SyncHook","args","name","undefined","hook","constructor","tapAsync","tapPromise","compile","prototype","module","exports"],"sources":["C:/Users/mahmutcolak/Desktop/rick-and-morty/node_modules/tapable/lib/SyncHook.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone, rethrowIfPossible }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonDone,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncHookCodeFactory();\n\nconst TAP_ASYNC = () => {\n\tthrow new Error(\"tapAsync is not supported on a SyncHook\");\n};\n\nconst TAP_PROMISE = () => {\n\tthrow new Error(\"tapPromise is not supported on a SyncHook\");\n};\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction SyncHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = SyncHook;\n\thook.tapAsync = TAP_ASYNC;\n\thook.tapPromise = TAP_PROMISE;\n\thook.compile = COMPILE;\n\treturn hook;\n}\n\nSyncHook.prototype = null;\n\nmodule.exports = SyncHook;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAEpD,MAAME,mBAAmB,SAASD,eAAe,CAAC;EACjDE,OAAOA,CAAC;IAAEC,OAAO;IAAEC,MAAM;IAAEC;EAAkB,CAAC,EAAE;IAC/C,OAAO,IAAI,CAACC,cAAc,CAAC;MAC1BH,OAAO,EAAEA,CAACI,CAAC,EAAEC,GAAG,KAAKL,OAAO,CAACK,GAAG,CAAC;MACjCJ,MAAM;MACNC;IACD,CAAC,CAAC;EACH;AACD;AAEA,MAAMI,OAAO,GAAG,IAAIR,mBAAmB,EAAE;AAEzC,MAAMS,SAAS,GAAGA,CAAA,KAAM;EACvB,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;AAC3D,CAAC;AAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;EACzB,MAAM,IAAID,KAAK,CAAC,2CAA2C,CAAC;AAC7D,CAAC;AAED,MAAME,OAAO,GAAG,SAAAA,CAASC,OAAO,EAAE;EACjCL,OAAO,CAACM,KAAK,CAAC,IAAI,EAAED,OAAO,CAAC;EAC5B,OAAOL,OAAO,CAACO,MAAM,CAACF,OAAO,CAAC;AAC/B,CAAC;AAED,SAASG,QAAQA,CAACC,IAAI,GAAG,EAAE,EAAEC,IAAI,GAAGC,SAAS,EAAE;EAC9C,MAAMC,IAAI,GAAG,IAAIvB,IAAI,CAACoB,IAAI,EAAEC,IAAI,CAAC;EACjCE,IAAI,CAACC,WAAW,GAAGL,QAAQ;EAC3BI,IAAI,CAACE,QAAQ,GAAGb,SAAS;EACzBW,IAAI,CAACG,UAAU,GAAGZ,WAAW;EAC7BS,IAAI,CAACI,OAAO,GAAGZ,OAAO;EACtB,OAAOQ,IAAI;AACZ;AAEAJ,QAAQ,CAACS,SAAS,GAAG,IAAI;AAEzBC,MAAM,CAACC,OAAO,GAAGX,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}