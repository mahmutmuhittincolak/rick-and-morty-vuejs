{"ast":null,"code":"import leb from \"./leb\";\n/**\n * According to https://webassembly.github.io/spec/core/binary/values.html#binary-int\n * max = ceil(32/7)\n */\n\nexport var MAX_NUMBER_OF_BYTE_U32 = 5;\n/**\n * According to https://webassembly.github.io/spec/core/binary/values.html#binary-int\n * max = ceil(64/7)\n */\n\nexport var MAX_NUMBER_OF_BYTE_U64 = 10;\nexport function decodeInt64(encodedBuffer, index) {\n  return leb.decodeInt64(encodedBuffer, index);\n}\nexport function decodeUInt64(encodedBuffer, index) {\n  return leb.decodeUInt64(encodedBuffer, index);\n}\nexport function decodeInt32(encodedBuffer, index) {\n  return leb.decodeInt32(encodedBuffer, index);\n}\nexport function decodeUInt32(encodedBuffer, index) {\n  return leb.decodeUInt32(encodedBuffer, index);\n}\nexport function encodeU32(v) {\n  return leb.encodeUInt32(v);\n}\nexport function encodeI32(v) {\n  return leb.encodeInt32(v);\n}\nexport function encodeI64(v) {\n  return leb.encodeInt64(v);\n}","map":{"version":3,"names":["leb","MAX_NUMBER_OF_BYTE_U32","MAX_NUMBER_OF_BYTE_U64","decodeInt64","encodedBuffer","index","decodeUInt64","decodeInt32","decodeUInt32","encodeU32","v","encodeUInt32","encodeI32","encodeInt32","encodeI64","encodeInt64"],"sources":["C:/Users/mahmutcolak/Desktop/rick-and-morty/node_modules/@webassemblyjs/leb128/esm/index.js"],"sourcesContent":["import leb from \"./leb\";\n/**\n * According to https://webassembly.github.io/spec/core/binary/values.html#binary-int\n * max = ceil(32/7)\n */\n\nexport var MAX_NUMBER_OF_BYTE_U32 = 5;\n/**\n * According to https://webassembly.github.io/spec/core/binary/values.html#binary-int\n * max = ceil(64/7)\n */\n\nexport var MAX_NUMBER_OF_BYTE_U64 = 10;\nexport function decodeInt64(encodedBuffer, index) {\n  return leb.decodeInt64(encodedBuffer, index);\n}\nexport function decodeUInt64(encodedBuffer, index) {\n  return leb.decodeUInt64(encodedBuffer, index);\n}\nexport function decodeInt32(encodedBuffer, index) {\n  return leb.decodeInt32(encodedBuffer, index);\n}\nexport function decodeUInt32(encodedBuffer, index) {\n  return leb.decodeUInt32(encodedBuffer, index);\n}\nexport function encodeU32(v) {\n  return leb.encodeUInt32(v);\n}\nexport function encodeI32(v) {\n  return leb.encodeInt32(v);\n}\nexport function encodeI64(v) {\n  return leb.encodeInt64(v);\n}"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,sBAAsB,GAAG,CAAC;AACrC;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,sBAAsB,GAAG,EAAE;AACtC,OAAO,SAASC,WAAWA,CAACC,aAAa,EAAEC,KAAK,EAAE;EAChD,OAAOL,GAAG,CAACG,WAAW,CAACC,aAAa,EAAEC,KAAK,CAAC;AAC9C;AACA,OAAO,SAASC,YAAYA,CAACF,aAAa,EAAEC,KAAK,EAAE;EACjD,OAAOL,GAAG,CAACM,YAAY,CAACF,aAAa,EAAEC,KAAK,CAAC;AAC/C;AACA,OAAO,SAASE,WAAWA,CAACH,aAAa,EAAEC,KAAK,EAAE;EAChD,OAAOL,GAAG,CAACO,WAAW,CAACH,aAAa,EAAEC,KAAK,CAAC;AAC9C;AACA,OAAO,SAASG,YAAYA,CAACJ,aAAa,EAAEC,KAAK,EAAE;EACjD,OAAOL,GAAG,CAACQ,YAAY,CAACJ,aAAa,EAAEC,KAAK,CAAC;AAC/C;AACA,OAAO,SAASI,SAASA,CAACC,CAAC,EAAE;EAC3B,OAAOV,GAAG,CAACW,YAAY,CAACD,CAAC,CAAC;AAC5B;AACA,OAAO,SAASE,SAASA,CAACF,CAAC,EAAE;EAC3B,OAAOV,GAAG,CAACa,WAAW,CAACH,CAAC,CAAC;AAC3B;AACA,OAAO,SAASI,SAASA,CAACJ,CAAC,EAAE;EAC3B,OAAOV,GAAG,CAACe,WAAW,CAACL,CAAC,CAAC;AAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}